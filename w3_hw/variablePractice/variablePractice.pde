float og_x1, og_x2, og_y1, og_y2; // 초기 베지어의 제어점이 되는 동시에 기존 제어점을 저장할 실수형 변수
float nxt_x1, nxt_x2, nxt_y1, nxt_y2; // 랜덤으로 생성되는 제어점을 저장할 실수형 변수
float step_x1, step_x2, step_y1, step_y2; //기존 제어점과 새로 생성된 제어점 사이의 거리를 저장할 변수
float frame = 0;  // 프레임을 나타내 줄 변수

void setup()
{
  frameRate(20); // 선이 생성되는 모습을 천천히 볼 수 있게 하기 위해 프레임레이트 조절(processing의 reference참고)
  size(1280, 720); // 창 크기
  background(255);

  noFill(); // 선 채우기 없애기
  og_x1 = 1280/2; // 맨 처음 생성할 제어점을 초기화(초기값을 설정) 해준다. x1 은 첫번째 제어점의 x값이라는 뜻으로 설정
  og_x2 = 1280/2;  //2번째 제어점의 x값
  og_y1 = 720/3;
  og_y2 = 720/3 *2;

  random_step(); //가장 처음 랜덤한 값을 생성하고 이동할 거리를 계산할 함수를 호출한다.

  strokeWeight(2);
  line(width/2, 0, width/2, height); //축이 될 수 있는 선을 그려준다.
}

void draw() {

  stroke(60, random(100, 200), 220, 20); // 파란색 계열의 선을 만들고, 투명도를 조절하여 이전에 선들이 겹쳐도 보일 수 있게 한다.
  strokeWeight(2);
  bezier(640, 100, og_x1, og_y1, og_x2, og_y2, 640, 620); //베지어를 그려준다.

  if (frame==20) { //프레임이 20에 도달하면 기존 제어점이 새로운 제어점에 도달하므로, 다음 제어점을 생성해준다.

    random_step();//랜덤한 값을 생성하고 이동할 거리를 계산할 함수를 호출한다 . 

    frame = 0; //프레임을 0으로 설정한다.
  }
  og_x1 +=step_x1; //제어점이 이동할 거리만큼 갈 수 있도록 더해준다.
  og_x2 +=step_x2;
  og_y1 +=step_y1;
  og_y2 +=step_y2;
  frame++; //프레임 수를 1만큼 증가시켜 20 프레임이 될 때까지 기다린다.
}

void random_step() { //랜덤한 값을 생성하고 이동할 거리를 계산할 함수를 만들어준다. void형으로 만든다(void형은 아무 값도 리턴하지 않는다).

  nxt_x1 = random(240, 1040); // 맨 처음 제어점이 나아가야 할 새로운 제어점을 만들어준다. 240과 1040 사이의 랜덤값으로 설정하여 최종 그림이 구 모양이 될 수 있도록 한다.
  nxt_x2 = random(240, 1040);
  nxt_y1 = random(100, 360); //첫번째 제어점은 100~360 사이로 설정한다.
  nxt_y2 = random(360, 620); //두번째 제어점은 360~620 사이로 설정한다.

  step_x1 =  (nxt_x1-og_x1)/20; // 랜덤값과 기존 값의 차이를 계산하고 한 프레임당 이동할 거리를 계산한다.
  step_x2 =  (nxt_x2-og_x2)/20; // 20으로 나눠주어 프레임 수와 같게 한다.
  step_y1 =  (nxt_y1-og_y1)/20;
  step_y2 =  (nxt_y2-og_y2)/20;
}
